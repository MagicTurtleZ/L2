package pattern

/*
	Реализовать паттерн «фабричный метод».
	Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
*/

/*
Паттерн "фабричный метод" может быть использован для реализации различных типов соединений к базе данных,
когда есть несколько типов баз данных, с которыми приложение может работать, паттерн "фабричный метод" позволит разделить логику
создания соединений к базам данных на различные фабрики, каждая из которых создает соединение к определенной базе данных.
*/

type StorageFactory struct {
	db Connection
}

// продукт определяет общий интерфейс объектов, которые может произвести создатель и его подклассы
type Connection interface {
	Connect() (*StorageFactory, error)
}

// конкретные продукты содержат код различных продуктов. Продукты отличаются реализацией, но интерфейс у них общий
type MySql struct{
}

type PgSql struct{
}

func (m *MySql) Connect() (*StorageFactory, error) {
	return &StorageFactory{db: m}, nil
}

func (p *PgSql) Connect() (*StorageFactory, error) {
	return &StorageFactory{db: p}, nil
}

// создатель возвращает новые объекты продуктов
func NewFactory(factoryType string) Connection {
	// конкретные создатели по-своему реализуют фабричный метод, производя те или иные конкретные продукты
	switch factoryType {
	case "MySql":
		return new(MySql)
	case "PgSql":
		return new(PgSql)
	}

	return nil
}

/*
	Плюсы:
1. выделяет код производства продуктов в одно место, упрощая поддержку кода
2. упрощает добавление новых продуктов в программу
	Минусы:
1. может привести к созданию больших параллельных иерархий классов, 
так как для каждого класса продукта надо создать свой подкласс создателя
*/
